import numpy as np
import matplotlib.pyplot as plt
import time

# Define the function to integrate
def f(x):
    return np.sqrt(1 - x**2)

# Define the Riemann sum function
def riemann_sum(f, a, b, N):
    dx = (b - a) / N
    x = np.linspace(a, b, N)
    return np.sum(f(x) * dx)

# Define the RMS error function
def rms_error_func(estimate, actual):
    return np.sqrt((estimate - actual)**2)

# Define the values of N to use
N_values = [10**i for i in range(1, 6)]

# Define the actual value of pi
pi_actual = 3.14159265358979323846

# Initialize lists to store the results
pi_estimates = []
rms_errors = []
execution_times = []

# For each value of N
for N in N_values:
    # Start the timer
    start_time = time.time()
    
    # Calculate the estimate of pi
    pi_estimate = 4 * riemann_sum(f, 0, 1, N)
    pi_estimates.append(pi_estimate)
    
    # Calculate the RMS error
    rms_error = rms_error_func(pi_estimate, pi_actual)
    rms_errors.append(rms_error)
    
    # Stop the timer and calculate the execution time
    execution_time = time.time() - start_time
    execution_times.append(execution_time)

# Plot the results
plt.figure(figsize=(12, 12))

plt.subplot(3, 1, 1)
plt.plot(N_values, pi_estimates, 'o-', label='Estimate')
plt.plot(N_values, [pi_actual]*len(N_values), 'r-', label='Actual')
plt.xscale('log')
plt.xlabel('N')
plt.ylabel('Value of pi')
plt.title('Estimate vs Actual value of pi')
plt.legend()

plt.subplot(3, 1, 2)
plt.plot(N_values, rms_errors, 'o-')
plt.xscale('log')
plt.xlabel('N')
plt.ylabel('RMS Error')
plt.title('RMS Error vs. N')

plt.subplot(3, 1, 3)
plt.plot(N_values, execution_times, 'o-')
plt.xscale('log')
plt.xlabel('N')
plt.ylabel('Execution Time (seconds)')
plt.title('Execution Time vs. N')

plt.tight_layout()
plt.show()

# Print the results
for i in range(len(N_values)):
    print(f"For N = {N_values[i]}:")
    print(f"Estimate of pi: {pi_estimates[i]}")
    print(f"RMS Error: {rms_errors[i]}")
    print(f"Execution Time: {execution_times[i]} seconds")
    print()

